#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SensorApi.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="StreamAnalyticsOutput")]
	public partial class SensorORMDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertsensorDataTable(sensorDataTable instance);
    partial void UpdatesensorDataTable(sensorDataTable instance);
    partial void DeletesensorDataTable(sensorDataTable instance);
    #endregion
		
		public SensorORMDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["StreamAnalyticsOutputConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SensorORMDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SensorORMDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SensorORMDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SensorORMDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<sensorDataTable> sensorDataTables
		{
			get
			{
				return this.GetTable<sensorDataTable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Table]")]
	public partial class sensorDataTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _temperature;
		
		private System.Nullable<double> _humidity;
		
		private System.Nullable<int> _light;
		
		private string _motion;
		
		private System.Nullable<System.DateTime> _timecreated;
		
		private string _guid;
		
		private System.Nullable<int> _carbondioxide;
		
		private string _location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OntemperatureChanging(System.Nullable<double> value);
    partial void OntemperatureChanged();
    partial void OnhumidityChanging(System.Nullable<double> value);
    partial void OnhumidityChanged();
    partial void OnlightChanging(System.Nullable<int> value);
    partial void OnlightChanged();
    partial void OnmotionChanging(string value);
    partial void OnmotionChanged();
    partial void OntimecreatedChanging(System.Nullable<System.DateTime> value);
    partial void OntimecreatedChanged();
    partial void OnguidChanging(string value);
    partial void OnguidChanged();
    partial void OncarbondioxideChanging(System.Nullable<int> value);
    partial void OncarbondioxideChanged();
    partial void OnlocationChanging(string value);
    partial void OnlocationChanged();
    #endregion
		
		public sensorDataTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_temperature", DbType="Float")]
		public System.Nullable<double> temperature
		{
			get
			{
				return this._temperature;
			}
			set
			{
				if ((this._temperature != value))
				{
					this.OntemperatureChanging(value);
					this.SendPropertyChanging();
					this._temperature = value;
					this.SendPropertyChanged("temperature");
					this.OntemperatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_humidity", DbType="Float")]
		public System.Nullable<double> humidity
		{
			get
			{
				return this._humidity;
			}
			set
			{
				if ((this._humidity != value))
				{
					this.OnhumidityChanging(value);
					this.SendPropertyChanging();
					this._humidity = value;
					this.SendPropertyChanged("humidity");
					this.OnhumidityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_light", DbType="Int")]
		public System.Nullable<int> light
		{
			get
			{
				return this._light;
			}
			set
			{
				if ((this._light != value))
				{
					this.OnlightChanging(value);
					this.SendPropertyChanging();
					this._light = value;
					this.SendPropertyChanged("light");
					this.OnlightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_motion", DbType="NVarChar(MAX)")]
		public string motion
		{
			get
			{
				return this._motion;
			}
			set
			{
				if ((this._motion != value))
				{
					this.OnmotionChanging(value);
					this.SendPropertyChanging();
					this._motion = value;
					this.SendPropertyChanged("motion");
					this.OnmotionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timecreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> timecreated
		{
			get
			{
				return this._timecreated;
			}
			set
			{
				if ((this._timecreated != value))
				{
					this.OntimecreatedChanging(value);
					this.SendPropertyChanging();
					this._timecreated = value;
					this.SendPropertyChanged("timecreated");
					this.OntimecreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_guid", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string guid
		{
			get
			{
				return this._guid;
			}
			set
			{
				if ((this._guid != value))
				{
					this.OnguidChanging(value);
					this.SendPropertyChanging();
					this._guid = value;
					this.SendPropertyChanged("guid");
					this.OnguidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_carbondioxide", DbType="Int")]
		public System.Nullable<int> carbondioxide
		{
			get
			{
				return this._carbondioxide;
			}
			set
			{
				if ((this._carbondioxide != value))
				{
					this.OncarbondioxideChanging(value);
					this.SendPropertyChanging();
					this._carbondioxide = value;
					this.SendPropertyChanged("carbondioxide");
					this.OncarbondioxideChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_location", DbType="NVarChar(MAX)")]
		public string location
		{
			get
			{
				return this._location;
			}
			set
			{
				if ((this._location != value))
				{
					this.OnlocationChanging(value);
					this.SendPropertyChanging();
					this._location = value;
					this.SendPropertyChanged("location");
					this.OnlocationChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
